//闭包调用
!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define(e)
    : ((t = 'undefined' != typeof globalThis ? globalThis : t || self).presentjs = e())
})(this, function () {
  'use strict'

  const minute = 60 // 1分钟

  const millisecon_per_second = 1e3 //1000 1000ms 等于1 毫秒

  const millisecon_per_minute = millisecon_per_second * minute //60000 1000ms * 60 等于1分钟

  const millisecon_per_hour = millisecon_per_minute * 60 //3600000 1000ms * 60 * 60 等于1小时

  const millisecon_per_day = millisecon_per_hour * 24 //86400000 1000ms * 60 * 60 * 24 等于1天

  const millisecon_per_week = millisecon_per_day * 7 //604800000 1000ms * 60 * 60 * 24 * 7 等于1周

  const millisecon_per_month = millisecon_per_day * 30 //2628000000 1000ms * 60 * 60 * 24 * 30 等于1月

  const millisecon_per_year = millisecon_per_day * 365 //31536000000 1000ms * 60 * 60 * 24 * 365 等于1年

  const MS = 'millisecond' //毫秒 ms
  const S = 'second' //秒 s
  const Min = 'minute' //分 m
  const H = 'hour' //时 h
  const D = 'day' //天 d
  const W = 'week' //周 w
  const M = 'month' //月 M
  const Q = 'quarter' //季 Q
  const Y = 'year' //年 y
  const DATE = 'date' //日期

  const FORMART_DATE = 'YYYY-MM-DDTHH:mm:ssZ' //日期格式
  const INVALID_DATE_STRING = 'Invalid Date' //日期格式

  //日期解析格式化正则
  const REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/
  const REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g

  const L = 'en' //默认 语言
  const Ls = {}
  Ls[L] = {
    name: 'en',
    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
  } //英文

  const isPresentjs = (p) => p instanceof Presentjs //是否是presentjs对象

  const presentjs = function (date, c) {
    if (isPresentjs(date)) {
      return date.clone() //如果是presentjs对象，则返回一个新的presentjs对象
    }

    // 解析本地日期格式
    const parseLocale = (preset, object, isLocal) => {
      let locale
      if (!preset) return L
      if (typeof preset === 'string') {
        const presetLower = preset.toLowerCase() //转换为小写
        if (Ls[presetLower]) {
          //如果有该语言
          locale = presetLower
        }
        if (object) {
          //如果有对象
          Ls[presetLower] = object
          locale = presetLower
        }
        const presetSplit = preset.split('-') //英文-分割
        if ((!locale && presetSplit, length > 1)) {
          return parseLocale(presetSplit[0]) //
        }
      } else {
        const { name } = preset //获取语言名称
        Ls[name] = preset //设置语言
        locale = name
      }
      if (!isLocal && locale) {
        //如果不是本地语言，则设置当前语言
        L = locale
      }
      return locale || (!isLocal && L) //如果没有语言，则返回当前语言
    }

    const config = typeof c === 'object' ? c : {} //配置
    config.date = date //日期
    config.args = arguments //参数
    return new Presentjs(config) //返回一个新的presentjs对象
  }

  //工具列
  const utils = {
    //字符串头部补全
    padStart(string, length, pad) {
      const s = String(string)
      if (!s || S.length >= length) return string
      return `${Array(length + 1 - S.length).join(pad)}${string}`
    },
    // 补全时区
    padZoneString(instance) {
      const negMinutes = -instance.utcOffset() //获取时区偏移量
      const minutes = Math.abs(negMinutes) // 获取绝对值
      const hourOffset = Math.floor(minutes / 60) // 小时偏移量
      const minuteOffset = minute % 60 // 分钟偏移量
      return `${negMinutes <= 0 ? '+' : '-'}${this.padStart(hourOffset, 2, '0')}:${this.padStart(minuteOffset, 2, '0')}` // 返回时区字符串
    },
    // 月份差分
    monthDiff() {
      // to do
    },
    // 日期去除小数
    absFloor(n) {
      return n < 0 ? Math.ceil(n) || 0 : Math.floor(n)
    },

    // 美化日期
    prettyUnit(unit) {
      const special = {
        M: M, //月份
        y: Y, //年份
        w: W, //周
        d: D, //天
        h: H, //小时
        m: Min, //分钟
        s: S, //秒
        ms: MS, //毫秒
        Q: Q, //季度
      }
      return (
        special[u] ||
        String(u || '')
          .toLowerCase()
          .replace(/s$/, '')
      )
    },
    //是否为undefind
    isUndefined(value) {
      return value === undefined
    },
    //解析日期
    parseDate(config) {
      const { date, utc } = config
      if (date === null) return new Date(NaN) //日期为null
      if (utils.isUndefined(date)) return new Date() // 日期为undefined 返回当前日期
      if (date instanceof Date) return new Date(date) //日期为Date对象
      if (typeof date === 'string' && !/Z$/i.test(date)) {
        const d = date.match(REGEX_PARSE) //解析日期
        if (d) {
          const m = d[2] - 1 || 0
          const ms = (d[7] || 0).substring(0, 3)
          if (utc) {
            return new Date(Date.UTC(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms))
          }
          return new Date(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms)
        }

        return new Date(date) //日期为字符串
      }
    },
    isPresentjs, //是否是presentjs对象

    wrapper(date, instance) {
      // 包装日期
      presentjs(date, {
        local: instance.$L, //语言
        utc: instance.$u, //utc时间
        x: instance.$x, //时区
        $offset: instance.$offset, //时区偏移量
      })
    },
  }

  // Presentjs 对象
  class Presentjs {
    //构造函数
    constructor(config) {
      this.$L = parseLocale(config.locale, null, true) //语言
      this.parse(config) // 解析日期
    }

    parse(config) {
      //解析日期
      this.$d = parseDate(config) //日期
      this.$x = config.x || {} //时区
      this.init() //初始化
    }

    init() {
      //初始化
      const { $d } = this
      this.$y = $d.getFullYear() //年份
      this.$M = $d.getMonth() //月份
      this.$D = $d.getDate() //日期
      this.$W = $d.getDay() //星期
      this.$H = $d.getHours() //小时
      this.$m = $d.getMinutes() //分钟
      this.$s = $d.getSeconds() //秒
      this.$ms = $d.getMilliseconds() //毫秒
    }

    $utils() {
      //工具
      return utils
    }
    //是否有效
    isValid() {
      return !(this.$d.toString() === INVALID_DATE_STRING)
    }
    //是否相同
    isSame(that, units) {
      const other = presentjs(that)
      return this.startOf(units) <= other && other <= this.endOf(units)
    }
    isAfter(that, units) {
      //是否在之后
      return presentjs(that) < this.startOf(units)
    }

    isBefore(that, units) {
      //是否在之前
      return this.endOf(units) < presentjs(that)
    }
    $g(input, get, set) {
      //获取值
      if (utils.isUndefined(input)) return this[get]
      return this.set(set, input)
    }
    unix() {
      //获取unix时间戳
      return Math.floor(this.valueOf() / 1000)
    }

    valueOf() {
      //获取时间戳
      return this.$d.getTime()
    }

    startOf(units, startOf) {
      //开始时间
      const isStartOf = !utils.isUndefined(startOf) ? startOf : true // 是否开始时间
      const unit = utils.prettyUnit(units)
      const instanceFactory = (d, m) => {
        const ins = utils.wrapper(this.$u ? Date.UTC(this.$y, m, d) : new Date(this.$y, m, d), this)
        return isStartOf ? ins : ins.endOf(D)
      } // 实例工厂

      const instanceFactorySet = (method, slice) => {
        const argumentStart = [0, 0, 0, 0] // 参数开始
        const argumentEnd = [23, 59, 59, 999] // 参数结束
        return utils.wrapper(
          this.toDate()[method].apply(
            // eslint-disable-line prefer-spread
            this.toDate('s'),
            (isStartOf ? argumentStart : argumentEnd).slice(slice)
          ),
          this
        )
      }

      const { $W, $M, $D } = this
      const utcPad = `set${this.$u ? 'UTC' : ''}`
      switch (unit) {
        case Y:
          return isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11)
        case M:
          return isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1)
        case W: {
          const weekStart = this.$locale().weekStart || 0
          const gap = ($W < weekStart ? 7 : 0) - weekStart
          return instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M)
        }
        case D:
        case DATE:
          return instanceFactorySet(`${utcPad}Hours`, 0)
        case H:
          return instanceFactorySet(`${utcPad}Minutes`, 1)
        case MIN:
          return instanceFactorySet(`${utcPad}Seconds`, 2)
        case S:
          return instanceFactorySet(`${utcPad}Milliseconds`, 3)
        default:
          return this.clone()
      }
    }

    endOf(arg) {
      return this.startOf(arg, false)
    }

    $set(units, int) {
      // private set
      const unit = utils.prettyUnit(units) // 单位
      const utcPad = `set${this.$u ? 'UTC' : ''}` // utc时间
      const name = {
        [D]: `${utcPad}Date`,
        [DATE]: `${utcPad}Date`,
        [M]: `${utcPad}Month`,
        [Y]: `${utcPad}FullYear`,
        [H]: `${utcPad}Hours`,
        [MIN]: `${utcPad}Minutes`,
        [S]: `${utcPad}Seconds`,
        [MS]: `${utcPad}Milliseconds`,
      }[unit]

      const arg = unit === D ? this.$D + (int - this.$W) : int

      if (unit === M || unit === Y) {
        const date = this.clone().set(DATE, 1)
        date.$d[name](arg)
        date.init()
        this.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d
      } else if (name) {
        this.$d[name](arg)
      }
      this.init()
      return this
    }

    set(string, int) {
      return this.clone().$set(string, int)
    }

    get(unit) {
      return this[utils.prettyUnit(unit)]()
    }

    add(number, units) {
      number = Number(number)
      const unit = utils.prettyUnit(units)

      const instanceFactorySet = (n) => {
        const p = presentjs(this)
        return utils.wrapper(p.date(p.date() + Math.round(n * number)), this)
      }

      if (unit === M) {
        return this.set(M, this.$M + number)
      }
      if (unit === Y) {
        return this.set(Y, this.$y + number)
      }
      if (unit === D) {
        return instanceFactorySet(1)
      }
      if (unit === W) {
        return instanceFactorySet(7)
      }

      const step =
        {
          [Min]: millisecon_per_minute,
          [H]: millisecon_per_hour,
          [S]: millisecon_per_second,
        }[unit] || 1 //ms

      const nextTimeStamp = this.$d.getTime() + number * step //下一个时间戳

      return utils.wrapper(new Date(nextTimeStamp), this)
    }

    subtract(number, string) {
      //减去
      return this.add(number * -1, string)
    }

    format(formatStr) {
      const locale = this.$locale()
      if (!this.isValid()) return locale.invalidDate || INVALID_DATE_STRING

      const str = formatStr || FORMAT_DEFAULT

      const zoneStr = utils.padZoneString(this)

      const { $H, $m, $M } = this

      const { weekdays, months, meridiem } = locale
      const getShort = (arr, index, full, length) => (arr && (arr[index] || arr(this, str))) || full[index].slice(0, length)
      const get$H = (num) => utils.padStart($H % 12 || 12, num, '0')

      const meridiemFunc =
        meridiem ||
        ((hour, minute, isLowercase) => {
          const m = hour < 12 ? 'AM' : 'PM'
          return isLowercase ? m.toLowerCase() : m
        })

      const matches = {
        YY: String(this.$y).slice(-2),
        YYYY: this.$y,
        M: $M + 1,
        MM: utils.padStart($M + 1, 2, '0'),
        MMM: getShort(locale.monthsShort, $M, months, 3),
        MMMMM: getShort(months, $M),
        D: this.$D,
        DD: utils.padStart(this.$D, 2, '0'),
        d: String(this.$W),
        dd: getShort(locale.weekdaysMin, this.$W, weekdays, 2),
        ddd: getShort(locale.weekdaysShort, this.$W, weekdays, 3),
        dddd: weekdays[this.$W],
        H: String($H),
        HH: utils.padStart($H, 2, '0'),
        h: get$H(1),
        hh: get$H(2),
        a: meridiemFunc($H, $m, true),
        A: meridiemFunc($H, $m, false),
        m: String($m),
        mm: utils.padStart($m, 2, '0'),
        s: String(this.$S),
        ss: utils.padStart(this.$S, 2, '0'),
        SSS: utils.padStart(this.$ms, 3, '0'),
        Z: zoneStr,
      }

      return str.replace(REGEX_FORMAT, (match, $1) => $1 || matches[match] || zoneStr.replace(':', ''))
    }

    // 获取utc偏移量
    utcOffset() {
      // 获取时区偏移量
    }
  }

  return 'test'
})
