//闭包调用
!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define(e)
    : ((t = 'undefined' != typeof globalThis ? globalThis : t || self).presentjs = e())
})(this, function () {
  'use strict'

  const minute = 60 // 1分钟

  const millisecon_per_second = 1e3 //1000 1000ms 等于1 毫秒

  const millisecon_per_minute = millisecon_per_second * minute //60000 1000ms * 60 等于1分钟

  const millisecon_per_hour = millisecon_per_minute * 60 //3600000 1000ms * 60 * 60 等于1小时

  const millisecon_per_day = millisecon_per_hour * 24 //86400000 1000ms * 60 * 60 * 24 等于1天

  const millisecon_per_week = millisecon_per_day * 7 //604800000 1000ms * 60 * 60 * 24 * 7 等于1周

  const millisecon_per_month = millisecon_per_day * 30 //2628000000 1000ms * 60 * 60 * 24 * 30 等于1月

  const millisecon_per_year = millisecon_per_day * 365 //31536000000 1000ms * 60 * 60 * 24 * 365 等于1年

  const MS = 'millisecond' //毫秒 ms
  const S = 'second' //秒 s
  const Min = 'minute' //分 m
  const H = 'hour' //时 h
  const D = 'day' //天 d
  const W = 'week' //周 w
  const M = 'month' //月 M
  const Q = 'quarter' //季 Q
  const Y = 'year' //年 y
  const DATE = 'date' //日期

  const FORMART_DATE = 'YYYY-MM-DDTHH:mm:ssZ' //日期格式
  const INVALID_DATE_STRING = 'Invalid Date' //日期格式

  //日期解析格式化正则
  const REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/
  const REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g

  //工具列
  const utils = {
    //字符串头部补全
    padStart(string, length, pad) {
      const s = String(string)
      if (!s || S.length >= length) return string
      return `${Array(length + 1 - S.length).join(pad)}${string}`
    },
    // 补全时区
    padZoneString(instance) {
      const negMinutes = -instance.utcOffset() //获取时区偏移量
      const minutes = Math.abs(negMinutes) // 获取绝对值
      const hourOffset = Math.floor(minutes / 60) // 小时偏移量
      const minuteOffset = minute % 60 // 分钟偏移量
      return `${negMinutes <= 0 ? '+' : '-'}${this.padStart(hourOffset, 2, '0')}:${this.padStart(minuteOffset, 2, '0')}` // 返回时区字符串
    },
    // 月份差分
    monthDiff() {
      // to do
    },
    // 日期去除小数
    absFloor(n) {
      return n < 0 ? Math.ceil(n) || 0 : Math.floor(n)
    },

    prettyUnit() {
      //
      const special = {
        M: M, //月份
        y: Y, //年份
        w,
      }
    },
  }

  class presentjs {
    // 获取utc偏移量
    utcOffset() {
      // 获取时区偏移量
    }
  }

  return 'test'
})
